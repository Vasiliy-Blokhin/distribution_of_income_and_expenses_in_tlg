from aiogram import types, F, Router
from aiogram.filters import CommandStart
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from elements.message_builder import (
    start_message,
    result_input_message,
    error_message,
    date_instr,
    value_instr
)
from elements.keyboard import (
    kind_builder,
    income_category_builder,
    expenses_category_builder,
    input_date_builder,
    input_confirm_builder
)
from elements.module import get_current_date_str
from elements.validators import date_validator
from source.settings.settings import SPLIT_SYM
from source.sql.main import SQLmain as sql
from source.sql.tables import MainTable


input_router = Router()


class InputData(StatesGroup):
    date = State()
    kind = State()
    category = State()
    value = State()
    user_id = State()


@input_router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥ (—Å–æ–æ–±—â–µ–Ω–∏–π).
    """
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text='/–≤–≤–æ–¥',)
    )
    builder.add(
        types.KeyboardButton(text='/–≤—ã–≤–æ–¥',)
    )
    builder.add(
        types.KeyboardButton(text='/—É–¥–∞–ª–∏—Ç—å',)
    )
    await message.answer(  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç.
        start_message(message.from_user.first_name),
        reply_markup=builder.as_markup(resize_keyboard=True),
    )

# ________________________________________________________________
@input_router.message(Command('–≤–≤–æ–¥'))
async def input(message: types.Message):
    """ –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    await message.answer(
        'üìù –í—ã–±–µ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞—Ç—ã: ',
        reply_markup=input_date_builder().as_markup()
    )


@input_router.callback_query(F.data.split(SPLIT_SYM)[0] == 'idate')
async def create_date(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(InputData.date)
    if callback.data.split(SPLIT_SYM)[1] == 'date':
        await callback.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:')
        await callback.message.answer(date_instr())
    else:
        await state.update_data(date=get_current_date_str())
        await callback.message.answer(
            'üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ',
            reply_markup=kind_builder().as_markup()
        )


@input_router.message(InputData.date)
async def input_date(message: types.Message, state: FSMContext):
    try:
        if await date_validator(message.text):
            await state.update_data(date=message.text)
        else:
            raise Exception
        await state.update_data(date=message.text)
        await state.set_state(InputData.kind)
        await message.answer(
            'üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ',
            reply_markup=kind_builder().as_markup()
        )
    except Exception:
        await message.answer(error_message())
        await state.clear()
        await input(message)


@input_router.callback_query(F.data.split(SPLIT_SYM)[0] == 'ikind')
async def input_income(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(kind=callback.data.split(SPLIT_SYM)[1])
    await state.set_state(InputData.category)
    if callback.data.split(SPLIT_SYM)[1] == '–î–æ—Ö–æ–¥—ã':
        await callback.message.answer(
            'üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏: ',
            reply_markup=income_category_builder().as_markup()
        )
    else:
        await callback.message.answer(
            'üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏: ',
            reply_markup=expenses_category_builder().as_markup()
        )


@input_router.callback_query(F.data.split(SPLIT_SYM)[0] == 'category')
async def input_category(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(category=callback.data.split(SPLIT_SYM)[1])
    await state.set_state(InputData.value)
    await callback.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
    await callback.message.answer(value_instr())


@input_router.message(InputData.value)
async def input_value(message: types.Message, state: FSMContext):
    try:
        await state.update_data(value=float(message.text))
        data = await state.get_data()
        await message.answer(
            result_input_message(
                user_id=str(message.from_user.id),
                date=data['date'],
                category=data['category'],
                value=data['value'],
                kind=data['kind']
            )
        )
        await message.answer(
            'üìà –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:',
            reply_markup=input_confirm_builder().as_markup()
        )
    except Exception:
        await message.answer(error_message())
        await state.clear()


@input_router.callback_query(F.data.split(SPLIT_SYM)[0] == 'iconfirm')
async def input_confirm(callback: types.CallbackQuery, state: FSMContext):
    command = callback.data.split(SPLIT_SYM)[1]
    if command == '–ù–µ—Ç':
        await state.clear()
        await callback.message.answer('üî¥ –û—Ç–º–µ–Ω–∞.')
    else:
        data = await state.get_data()
        user_id = str(callback.from_user.id)
        date = data['date'].split(SPLIT_SYM)
        in_data = [
            {
                'user_id': str(user_id),
                'day': int(date[0]),
                'month': int(date[1]),
                'year': int(date[2]),
                'kind': str(data['kind']),
                'category': str(data['category']),
                'value': float(data['value'])
            }
        ]
        await callback.message.answer('üü¢ –î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã.')
        sql.append_data(
            table=MainTable,
            data=in_data
        )
        await state.clear()
